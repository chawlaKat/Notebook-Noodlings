# -*- coding: utf-8 -*-
"""graphable.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VIifqHBYNcdeaVEIXG0uS1OE4H18m1fS

The script that actually generates a graph. Must include the methods: 
* create_graph()

#Imports
"""

# pip install liac_arff

import altair as alt
import pandas as pd
import bark_to_byte as bb

"""#Helpers

Convert to dataframe
"""

def convert_to_dataframe(file_name):
  df = bb.arff_to_dataframe(file_name)
  return df

"""STUB: Check if current code will work or not"""

def should_run(df):
  columns = list(df.columns)
  if ('runtime' in columns):
    return True

  return False

"""STUB: Format data"""

def format_data(df):
  formatted_df = None

  # formatting for FOLD technique
  # set up so each instance has only one row, with columns for (Column x Algorithm)

  # reorganized using multi-indexing
  df_by_instance = df.set_index(['instance_id', 'algorithm']).unstack()

  # figure out what the new headers should be
  flattened_headers = []
  for entry in df_by_instance.columns.values:
    flattened_headers.append('_'.join(entry))

  # assign correct headers
  df_by_instance.columns = flattened_headers

  # remove multi-index; make it a simple dataframe again
  formatted_df = df_by_instance.reset_index()

  return formatted_df

"""STUB: Get required info for graph setup"""

def get_graphable_columns(df, solution_measure):
  algs = list(df['algorithm'].unique())
  cols = list(map(lambda al:(solution_measure+'_'+al), algs))
  return cols

"""STUB: Create graph object"""

def create_scatter(df, cols):
  # TODO: assign axes from dataframe!
  
  # check if expected vals are actual columns in data frame
  # cols = df.columns
  # x_axis = ''
  # y_axis = ''
  
  # if ('a' in cols):
  #   x_axis = 'a'
    
  # if ('b' in cols):
  #   y_axis = 'b'

  # STUB: hardcode abstracted_algorithm_runs.arff columns
  x_axis = cols[0]
  y_axis = cols[1]
    
  # # create the graph object
  # gph = alt.Chart(df).mark_circle().encode(
  #     x = x_axis,
  #     y = y_axis
  # )

  gph = alt.Chart(df).mark_circle(size=60).transform_fold(
      cols,
      as_ = ['column_x', 'value_x']
  ).transform_fold(
      cols,
      as_ = ['column_y', 'value_y']
  ).mark_point().encode(
      x = x_axis+':Q',
      y = y_axis+':Q'
  )
  
  return gph

"""#Main Method"""

def create_graph(arff_file_name):
  source = convert_to_dataframe(arff_file_name)

  is_correct_sltn_measure = should_run(source)

  if(is_correct_sltn_measure):
    dataframe = format_data(source)
    axis_cols = get_graphable_columns(source, 'runtime')
    graph = create_scatter(dataframe, axis_cols)

  else:
    print(arff_file_name + ": Cannot create graph.")

    # source = pd.DataFrame({
    #   'placeholder_x': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],
    #   'placeholder_y': [28, 55, 43, 91, 81, 53, 19, 87, 52]
    # })

    # graph = alt.Chart(source).mark_circle().encode(
    #     x = 'placeholder_x',
    #     y = 'placeholder_y'
    # )

    graph = None
  
  return graph

"""#Tests"""

# source = convert_to_dataframe("abstracted_algorithm_runs.arff")

# format_data(source)

# create_graph("abstracted_algorithm_runs.arff")

# source = convert_to_dataframe("sayHey.arff")
# should_run(source)

create_graph("sayHey.arff")

