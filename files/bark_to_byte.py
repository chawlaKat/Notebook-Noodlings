# -*- coding: utf-8 -*-
"""Bark to Byte

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/chawlaKat/Notebook-Noodlings/blob/master/Bark_to_Byte.ipynb

<h2>Goal: Move .arff data into a dataframe</h2>

Functionality: <br>
Given an arff file, remove the attribute data types and create a pandas DataFrame

Uses files (for testing):
*   sayNi.arff
*   sayHey.arff

Future work:


*   Use multi-indexing to preserve the data types
*   Use np array instead of list, for speed / optimization

Notes: 

*  Variable declarations and assignments may be out of order, because I moved the cells around
* Static copy saved at (private repo): https://github.com/chawlaKat/aslib-visualization

**bold text**<h4>Imports</h4>

Commented so it works as an imported module. If running this alone, check that liac_arff has been installed.
"""

#pip install liac_arff

import arff
import pandas as pd
import numpy as np

"""<h4>Helpers</h4>

These must be defined above the primary method in order to cooperate, apparently :D

Get arff data: returns a dictionary<br>

---<br>


Format:

*   'attributes' : [('Name Element0', 'TYPE'), ('Name' Element1, 'TYPE')]
*   'data': [<br>
[Entry0 Element0, Entry0 Element1], <br>
[Entry1 Element0, Entry1 Element1],
<br>]
"""

def open_file(name):
  file = open(name);
  loaded = arff.load(file);
  
  return loaded;

# OPEN_FILE TESTS
# file_name = "sayNi.arff";
# my_loaded_file = open_file(file_name)
# my_loaded_file

"""Given a list of lists, extracts the first element of each. (Specifically, used to get name of each attribute without extra data so we can use it as a column header)"""

def get_first(tuple_list):
  
  first_only = [];
  
  for el in tuple_list:
    first = el[0];
    first_only.append(first);
    
  return first_only;

#GET_FIRST TESTS
#attribute_names = get_first(my_loaded_file['attributes'])
#attribute_names

def to_dataframe(data, cols):
  dataframe = pd.DataFrame(data, columns = cols);
  return dataframe;

# TO_DATAFRAME TESTS
#ni_data = my_loaded_file['data'];
# ni_cols = attribute_names

# to_dataframe(ni_data, ni_cols)

"""<h4>Primary Method</h4>"""

def arff_to_dataframe(filename):
  loaded = open_file(filename);
  data = loaded['data'];
  atts = loaded['attributes'];
  col_headers = get_first(atts);
  
  frame = to_dataframe(data, col_headers);
  
  return frame;

#test
arff_to_dataframe('sayNi.arff')

"""Given data and a list of column headers, constructs a dataframe.

<h3>This is where I noodled around, so I knew how the bits worked and how they fit together</h3>
"""

# #change vars to open different file
# filename = "sayNi.arff";

# opened_file = open(filename);
# loaded_file = arff.load(opened_file);

# loaded_file

# att_list = loaded_file['attributes']

# att_list

# data_list = loaded_file['data']

# data_list

# att_frame = pd.DataFrame(att_list)

# att_frame

# #for each element of att_list, get first value; append it
# #this is brute force. clean it up later.

# att_name_list = [];

# for att in att_list:
#    att_name_list.append(att[0]);
    
# att_name_list

# dataframe = pd.DataFrame(data_list, columns = att_name_list)

# dataframe

# #skip this, i dont get it yet
# file_ni = open_file("sayNi.arff")
# attributes = np.array(file_ni['attributes'])

# attributes

# #skip this, i don't get it yet
# att_names_only = [];

# for att in np.nditer(attributes):
#   print(att[0])

# arff_to_dataframe('sayHey.arff')